swagger: '2.0'
info:
  version: '2.11'
  title: Open Service Broker API
  description: |
    ### The Open Service Broker API defines an HTTP interface between the services marketplace of a platform and service brokers.
    ## Change

    ### Change Policy

    * Existing endpoints and fields will not be removed or renamed.
    * New optional endpoints, or new HTTP methods for existing endpoints, may be
    added to enable support for new features.
    * New fields may be added to existing request/response messages.
    These fields must be optional and should be ignored by clients and servers
    that do not understand them.

    ### Changes Since v2.10

    * Add `bindable` field to plans, to allow services to have both bindable and non-bindable plans.

    ## API Overview

    The Service Broker API defines an HTTP interface between the services marketplace of a platform and service brokers.

    The service broker is the component of the service that implements the Service Broker API, for which a platform's marketplace is a client. Service brokers are responsible for advertising a catalog of service offerings and service plans to the marketplace, and acting on requests from the marketplace for provisioning, binding, unbinding, and deprovisioning.

    In general, provisioning reserves a resource on a service; we call this reserved resource a service instance. What a service instance represents can vary by service. Examples include a single database on a multi-tenant server, a dedicated cluster, or an account on a web application.

    What a binding represents may also vary by service. In general creation of a binding either generates credentials necessary for accessing the resource or provides the service instance with information for a configuration change.

    A platform marketplace may expose services from one or many service brokers, and an individual service broker may support one or many platform marketplaces using different URL prefixes and credentials.

    ## API Version Header

    Requests from the platform to the service broker must contain a header that declares the version number of the Service Broker API that the marketplace will use:

    `X-Broker-Api-Version: 2.11`

    The version numbers are in the format `MAJOR.MINOR`, using semantic versioning such that 2.10 comes before 2.11.

    This header allows brokers to reject requests from marketplaces for versions they do not support. While minor API revisions will always be additive, it is possible that brokers depend on a feature from a newer version of the API that is supported by the platform. In this scenario the broker may reject the request with `412 Precondition Failed` and provide a message that informs the operator of the required API version.

    ## Authentication

    The marketplace must authenticate with the service broker using HTTP basic authentication (the `Authorization:` header) on every request. The broker is responsible for validating the username and password and returning a `401 Unauthorized` message if credentials are invalid. It is recommended that brokers support secure communication from platform marketplaces over TLS.

    ## Synchronous and Asynchronous Operations

    Broker clients expect prompt responses to all API requests in order to provide users with fast feedback. Service broker authors should implement their brokers to respond promptly to all requests but must decide whether to implement synchronous or asynchronous responses. Brokers that can guarantee completion of the requested operation with the response should return the synchronous response. Brokers that cannot guarantee completion of the operation with the response should implement the asynchronous response.

    Providing a synchronous response for a provision, update, or bind operation before actual completion causes confusion for users as their service may not be usable and they have no way to find out when it will be. Asynchronous responses set expectations for users that an operation is in progress and can also provide updates on the status of the operation.

    Support for synchronous or asynchronous responses may vary by service offering, even by service plan.

    ### Synchronous Operations

    To execute a request synchronously, the broker need only return the usual status codes: `201 CREATED` for provision and bind, and `200 OK` for update, unbind, and deprovision.

    Brokers that support sychronous responses for provision, update, and delete can ignore the `accepts_incomplete=true` query parameter if it is provided by the client.

    ### Asynchronous Operations

    **Note:** Asynchronous operations are currently supported only for provision, update, and deprovision.

    For a broker to return an asynchronous response, the query parameter `accepts_incomplete=true` must be included the request. If the parameter is not included or is set to `false`, and the broker cannot fulfill the request synchronously (guaranteeing that the operation is complete on response), then the broker should reject the request with the status code `422 UNPROCESSABLE ENTITY` and the following body:

    ```
    {
      "error": "AsyncRequired",
      "description": "This service plan requires client support for asynchronous service operations."
    }
    ```

    If the query parameter described above is present, and the broker executes the request asynchronously, the broker must return the asynchronous response `202 ACCEPTED`. The response body should be the same as if the broker were serving the request synchronously.

    An asynchronous response triggers the platform marketplace to poll the endpoint `GET /v2/service_instances/:guid/last_operation` until the broker indicates that the requested operation has succeeded or failed. Brokers may include a status message with each response for the `last_operation` endpoint that provides visibility to end users as to the progress of the operation.

    ### Blocking Operations

    The marketplace must ensure that service brokers do not receive requests for an instance while an asynchronous operation is in progress. For example, if a broker is in the process of provisioning an instance asynchronously, the marketplace must not allow any update, bind, unbind, or deprovision requests to be made through the platform. A user who attempts to perform one of these actions while an operation is already in progress must receive an HTTP 400 response with the error message: `Another operation for this service instance is in progress`.

    ## Polling Last Operation

    When a broker returns status code `202 ACCEPTED` for provision, update or deprovision, the platform will begin polling the `/v2/service_instances/:guid/last_operation` endpoint to obtain the state of the last requested operation. The broker response must contain the field `state` and an optional field `description`.

    Valid values for `state` are `in progress`, `succeeded`, and `failed`. The platform will poll the `last_operation` endpoint as long as the broker returns `"state": "in progress"`. Returning `"state": "succeeded"` or `"state": "failed"` will cause the platform to cease polling. The value provided for `description` will be passed through to the platform API client and can be used to provide additional detail for users about the progress of the operation.


    ### Polling Interval and Duration

    The frequency and maximum duration of polling may vary by platform client. If a platform has a max polling duration and this limit is reached, the platform will cease polling and the operation state will be considered `failed`.

    ## Binding

    If `bindable:true` is declared for a service or plan in the cataolog endpoint, broker clients may request generation of a service binding.

    **Note**: Not all services must be bindable. Some deliver value just from being provisioned. Brokers that offer services that are bindable should declare them as such using `bindable: true` in the Catalog. Brokers that do not offer any bindable services do not need to implement the endpoint for bind requests.

    ### Types of Binding

    #### Credentials ####

    Credentials are a set of information used by an application or a user to utilize the service instance. If the broker supports generation of credentials it should return `credentials` in the response for a request to create a service binding. Credentials should be unique whenever possible, so access can be revoked for each binding without affecting consumers of other bindings for the service instance.

    #### Log Drain ####

    There are a class of service offerings that provide aggregation, indexing, and analysis of log data. To utilize these services an application that generates logs needs information for the location to which it should stream logs. If a broker represents one of these services, it may optionally return a `syslog_drain_url` in the response for a request to create a service binding, to which logs may be streamed.

    The `requires` field in the catalog endpoint enables a platform marketplace to validate a response for create binding that includes a `syslog_drain_url`. Platform marketplaces should consider a broker's response invalid if it includes a `syslog_drain_url` and `"requires":["syslog_drain"]` is not present in the catalog endpoint.

    #### Route Services

    There are a class of service offerings that intermediate requests to applications, performing functions such as rate limiting or authorization. To configure a service instance with behavior specific to an application's routable address, a broker client may send the address along with the request to create a binding using `"bind_resource":{"route":"some-address.com"}`.

    Some platforms may support proxying of application requests to service instances. In this case the platform needs to know where to send application requests; to facilitate this, the broker may return a `route_service_url` in the response for a request to create a binding. Not all services of this type expect to receive requests proxied by the platform; some services will have been configured out-of-band to intermediate requests to applications. In this case, the broker will not return `route_service_url` in response to the create binding request. By sending `bind-resource` as described above, the platform enables dynamic configuration of a service instance already in the application request path for the route, requiring no change in the platform routing tier.

    The `requires` field in the catalog endpoint enables a platform marketplace to validate requests to create bindings. A platform may opt to reject requests to create bindings when a broker has declared `"requires":["route_forwarding"]` for a service in the catalog endpoint.

    #### Volume Services ####

    There are a class of services that provide network storage to applications via volume mounts in the application container. A service broker may return data required for this configuration with `volume_mount` in response to the request to create a binding.

    The `requires` field in the catalog endpoint enables a platform marketplace to validate a response for create binding that includes a `volume_mounts`. Platform marketplaces should consider a broker's response invalid if it includes a `volume_mounts` and `"requires":["volume_mount"]` is not present in the catalog endpoint.

    ## Broker Errors

    Broker failures beyond the scope of the well-defined HTTP response codes defined in the specification should return an appropriate HTTP response code (chosen to accurately reflect the nature of the failure) and a body containing a valid JSON Object, possibly including a `description` field (string) containing a meaningful error message explaining why the request failed.

    ## Orphans

    The platform marketplace is the source of truth for service instances and bindings. Service brokers are expected to have successfully provisioned all the instances and bindings that the marketplace knows about, and none that it doesn't.

    Orphans can result if the broker does not return a response before a request from the marketplace times out (typically 60 seconds). For example, if a broker does not return a response to a provision request before the request times out, the broker might eventually succeed in provisioning an instance after the marketplace considers the request a failure. This results in an orphan instance on the broker's side.

    To mitigate orphan instances and bindings, the marketplace should attempt to delete resources it cannot be sure were successfully created, and should keep trying to delete them until the broker responds with a success.

    Platforms should initiate orphan mitigation in the following scenarios:

    | Status code of broker response | Platform interpretation of response | Platform initiates orphan mitigation? |
    |---|---|---|
    | 200 | Success | No |
    | 200 with malformed response |  Failure | No |
    | 201 | Success | No |
    | 201 with malformed response | Failure | Yes |
    | All other 2xx | Failure | Yes |
    | 408 | Failure due to timeout | Yes |
    | All other 4xx | Broker rejected request | No |
    | 5xx | Broker error | Yes |
    | Timeout | Failure | Yes |

    If the platform marketplace encounters an internal error provisioning an instance or binding (for example, saving to the database fails), then it should at least send a single delete or unbind request to the service broker to prevent creation of an orphan.

externalDocs:
  description: View the Github repository for the Open Service Broker API
  url: 'https://github.com/openservicebrokerapi/servicebroker'
host: 127.0.0.1:8888
basePath: /v2
schemes:
- http
paths:
  /catalog:
    get:
      operationId: catalog
      summary: Fetch the catalog of plans that a service offers. After implementing this endpoint, the service broker must be registered with the platform to make the services and plans available to end users.
      description: |
        The first endpoint that a broker must implement is the service catalog.
        The platform marketplace fetches this endpoint from all brokers in order to present an aggregated user-facing catalog.
        Warnings for broker authors:
        * Be cautious removing services and plans from their catalogs, as platform marketplaces may have provisioned service instances of these plans. Consider your deprecation strategy.
        * Do not change the ids of services and plans. This action is likely to be evaluated by a platform marketplace as a removal of one plan and addition of another. See above warning about removal of plans.
        Responses with any undefined status codes should be interpreted as an error.
      x-broker-api-version: 2.11
      produces:
      - application/json
      tags:
      - catalog
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CatalogServices'
  /service_instances/{instance_id}:
    parameters:
    - $ref: '#/parameters/instance_id'
    put:
      operationId: createServiceInstance
      summary: Provisions a service instance.
      description: |
        When the broker receives a provision request from the platform, it should take whatever action is necessary to create a new resource.
        What provisioning represents varies by service and plan, although there are several common use cases.
        For a MySQL service, provisioning could result in an empty dedicated database server running on its own VM or an empty schema on a shared database server.
        For non-data services, provisioning could just mean an account on an multi-tenant SaaS application.
      x-broker-api-version: 2.11
      produces:
      - application/json
      consumes:
      - application/json
      tags:
      - service_instances
      parameters:
        - in: body
          name: ServiceInstanceParameters
          description: Parameters for provisioning a service instance.
          required: true
          schema:
            $ref: '#/definitions/ProvisionParameters'
      responses:
        '200':
          description: May be returned if the service instance already exists and the requested parameters are identical to the existing service instance. The expected response body is below.
          schema:
            $ref: '#/definitions/ProvisionResponse'
        '201':
          description: Service instance has been provisioned. The expected response body is below.
          schema:
            $ref: '#/definitions/ProvisionResponse'
        '202':
          description: Service instance provisioning is in progress. This triggers the platform marketplace to poll the relevant last operation endpoint for operation status.
          schema:
            $ref: '#/definitions/ProvisionResponse'
        '409':
          description: Should be returned if a service instance with the same id already exists but with different attributes.
          schema:
            $ref: '#/definitions/Empty'
        '422':
          description: Should be returned if the broker only supports asynchronous provisioning for the requested plan and the request did not include `?accepts_incomplete=true`.
          schema:
            $ref: '#/definitions/Error'
    patch:
      operationId: updateServiceInstance
      summary: Updating a Service Instance
      description: |
        By implementing this endpoint, service broker authors can enable users to modify two attributes of an existing service instance: the service plan and parameters.
        By changing the service plan, users can upgrade or downgrade their service instance to other plans.
        By modifying properties, users can change configuration options that are specific to a service or plan.
        To enable support for the update of the plan, a broker should declare support per service by including `plan_updateable: true` in its catalog endpoint.
        Not all permutations of plan changes are expected to be supported. For example, a service may support upgrading from plan "shared small" to "shared large" but not to plan "dedicated".
        It is up to the broker to validate whether a particular permutation of plan change is supported. If a particular plan change is not supported, the broker should return a meaningful error message in response.
      x-broker-api-version: 2.11
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - service_instances
      parameters:
        - in: body
          name: UpdateParameters
          description: Parameters for updating a service instance.
          required: true
          schema:
            $ref: '#/definitions/UpdateParameters'
      responses:
        '200':
          description: The requests changes have been applied.
          schema:
            $ref: '#/definitions/Empty'
        '202':
          description: Service instance update is in progress. This triggers the platform marketplace to poll the relevant last operation endpoint for operation status.
          schema:
            $ref: '#/definitions/OperationInProgress'
        '422':
          description: May be returned if the requested change is not supported or if the request cannot currently be fulfilled due to the state of the instance (e.g. instance utilization is over the quota of the requested plan). Broker should include a user-facing message in the body. Additionally, a 422 can also be returned if the broker only supports asynchronous update for the requested plan and the request did not include `?accepts_incomplete=true`.
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: deprovisionServiceInstance
      summary: Deprovisions a service instance.
      description: |
        When a broker receives a deprovision request from the marketplace, it should delete any resources it created during the provision.
        Usually this means that all resources are immediately reclaimed for future provisions.
      x-broker-api-version: 2.11
      produces:
      - application/json
      tags:
      - service_instances
      parameters:
        - in: body
          name: DeprovisionParameters
          description: Parameters for deprovisioning a service instance.
          required: true
          schema:
            $ref: '#/definitions/DeprovisionParameters'
      responses:
        '200':
          description: Service instance was deleted.
          schema:
            $ref: '#/definitions/Empty'
        '202':
          description: Service instance deletion is in progress. This triggers the marketplace to poll the relevant last operation endpoint for operation status.
          schema:
            $ref: '#/definitions/OperationInProgress'
        '410':
          description: Should be returned if the service instance does not exist.
          schema:
            $ref: '#/definitions/Empty'
        '422':
          description: Should be returned if the broker only supports asynchronous deprovisioning for the requested plan and the request did not include `?accepts_incomplete=true`.
          schema:
            $ref: '#/definitions/Error'
  /service_instances/{instance_id}/last_operation:
    parameters:
    - $ref: '#/parameters/instance_id'
    put:
      operationId: lastServiceInstanceOperation
      summary: Check the last operation for a service instance.
      description: Check the status of the last operation for a service instance.
      x-broker-api-version: 2.11
      produces:
      - application/json
      consumes:
      - application/json
      tags:
      - service_instances
      - async
      parameters:
        - name: service_id
          in: query
          type: string
          description: The ID of the servicef rom the catalog. Although this is not required, the platform should include them on all requests.
        - name: plan_id
          in: query
          type: string
          description: The ID of the plan from the catalog. Although this is not required, the platform should include them on all requests.
        - name: operation
          in: query
          type: string
          description: A broker-provided identifier for the operation. When a value for `operation` is included with asynchronous responses for provision service, update service and deprovision service requests, the platform should provide the same value using this query parameter.
      responses:
        '200':
          description: Fetched last operation successfully.
          schema:
            $ref: '#/definitions/LastOperationResponse'
        '410':
          description: Appropriate only for asynchronous delete operations. The platform should consider this response a success and remove the resource from its database. Returning this while the platform is polling for create or update operations should be interpreted as an invalid response and the platform should continue polling.
          schema:
            $ref: '#/definitions/Error'
  /service_instances/{instance_id}/service_bindings/{binding_id}:
    parameters:
    - $ref: '#/parameters/instance_id'
    - $ref: '#/parameters/binding_id'
    put:
      operationId: serviceBind
      summary: Reqest generation of a service binding.
      description: See the external documentation for more information on the types of service bindings.
      x-broker-api-version: 2.11
      produces:
      - application/json
      consumes:
      - application/json
      tags:
      - service_instances
      - service_bindings
      parameters:
        - in: body
          name: BindingParameters
          description: Parameters for creating a service binding.
          required: true
          schema:
            $ref: '#/definitions/BindingParameters'
      responses:
        '201':
          description: Binding has been created.
          schema:
            $ref: '#/definitions/BindingCreated'
        '200':
          description: May be returned if the binding already exists and the requested parameters are identical to the existing binding.
          schema:
            $ref: '#/definitions/BindingCreated'
        '409':
          description: Should be returned if the requested binding already exists.
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: Should be returned if the broker requires that `app_guid` be included in the request body.
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: serviceUnbind
      summary: Unbind a service
      description: |
        When a broker receives an unbind request from the marketplace, it should delete any resources associated with the binding.
        In the case where credentials were generated, this may result in requests to the service instance failing to authenticate.
        Brokers that do not provide any bindable services or plans do not need to implement this endpoint.
      x-broker-api-version: 2.11
      produces:
      - application/json
      tags:
      - service_instances
      - service_bindings
      parameters:
        - in: body
          name: UnbindingParameters
          description: Parameters for deleting a service binding.
          required: true
          schema:
            $ref: '#/definitions/UnbindingParameters'
      responses:
        '200':
          description: Binding was deleted.
          schema:
            $ref: '#/definitions/Empty'
        '410':
          description: Should be returned if the binding does not exist.
          schema:
            $ref: '#/definitions/Empty'

parameters:
  instance_id:
    name: instance_id
    in: path
    description: The `instance_id` of a service instance is provided by the platform. This ID will be used for future requests (bind and deprovision), so the broker must use it to correlate the resource it creates.
    type: string
    required: true
  binding_id:
    name: binding_id
    in: path
    description: The `binding_id` of a service binding is provided by the platform. This ID will be used for future unbind requests, so the broker must use it to correlate the resource it creates.
    type: string
    required: true

definitions:
  CatalogServices:
    description: Array of service objects.
    properties:
      services:
        type: array
        items:
          $ref: '#/definitions/Services'
  Services:
    description: Schema of a service object.
    properties:
      id:
        type: string
        description: An identifier used to correlate this service in future requests to the broker. This must be globally unique within a platform marketplace. Using a GUID is recommended.
      name:
        type: string
        description: A CLI-friendly name of the service. All lowercase, no spaces. This must be globally unique within a platform marketplace.
      description:
        type: string
        description: A short description of the service.
      bindable:
        type: boolean
        description: Specifies whether instances of the service can be bound to applications. This specifies the default for all plans of this service. Plans can override this field.
      tags:
        type: array
        description: Tags provide a flexible mechanism to expose a classification, attribute, or base technology of a service, enabling equivalent services to be swapped out without changes to dependent logic in applications, buildpacks, or other services. E.g. mysql, relational, redis, key-value, caching, messaging, amqp.
        items:
          type: string
      metadata:
        type: object
        description: An opaque object of metadata for a service offering.
      dashboard_client:
        $ref: '#/definitions/DashboardClient'
      plan_updateable:
        type: boolean
        description: Whether the service supports upgrade/downgrade for some plans. Please note that the misspelling of the attribute plan_updatable to plan_updateable was done by mistake. We have opted to keep that misspelling instead of fixing it and thus breaking backward compatibility.
      plans:
        type: array
        description: A list of plans for this service.
        items:
          $ref: '#/definitions/Plan'
    required:
    - id
    - name
    - description
    - bindable
  DashboardClient:
    description: Provides access to a dashboard for this service.
    properties:
      id:
        type: string
        description: The id of the Oauth client that the dashboard will use.
      secret:
        type: string
        description: A secret for the dashboard client
      redirect_uri:
        type: string
        description: A URI for the service dashboard. Validated by the OAuth token server when the dashboard requests a token.
  Plan:
    description: A plan offered by a service.
    properties:
      id:
        type: string
        description: An identifier used to correlate this plan in future requests to the broker. This must be globally unique within a platform marketplace. Using a GUID is recommended.
      name:
        type: string
        description: The CLI-friendly name of the plan. Must be unique within the service. All lowercase, no spaces.
      description:
        type: string
        description: A short description of the plan.
      metadata:
        type: object
        description: An opaque object of metadata for a service offering.
      free:
        type: boolean
        description: When false, instances of this plan have a cost. The default is true.
      bindable:
        type: boolean
        description: Specifies whether instances of the service plan can be bound to applications. This field is optional. If specified, this takes precedence over the bindable attribute of the service. If not specified, the default is derived from the service.
    required:
    - id
    - name
    - description
  ProvisionParameters:
    description: Configuration for provisioning a service instance.
    properties:
      service_id:
        type: string
        description: The ID of the service (from the catalog). Must be globally unique.
      plan_id:
        type: string
        description: The ID of the plan (from the catalog) for which the service instance has been requested. Must be unique to a service.
      parameters:
        $ref: '#/definitions/ServiceParameters'
      accepts_incomplete:
        type: boolean
        description: A value of true indicates that the marketplace and its clients support asynchronous broker operations. If this parameter is not included in the request, and the broker can only provision an instance of the requested plan asynchronously, the broker should reject the request with a 422 as described below.
      organization_guid:
        type: string
        description: The platform GUID for the organization under which the service is to be provisioned. Although most brokers will not use this field, it may be helpful for executing operations on a user's behalf.
      space_guid:
        type: string
        description: The identifier for the project space within the platform organization. Although most brokers will not use this field, it may be helpful for executing operations on a user's behalf.
    required:
    - service_id
    - plan_id
    - organization_guid
    - space_guid
  UpdateParameters:
    description: Configuration for updating a service instance.
    properties:
      service_id:
        type: string
        description: The ID of the service (from the catalog). Must be globally unique.
      plan_id:
        type: string
        description: The ID of the plan (from the catalog) for which the service instance has been requested. Must be unique to a service.
      parameters:
        $ref: '#/definitions/ServiceParameters'
      accepts_incomplete:
        type: boolean
        description: A value of true indicates that the marketplace and its clients support asynchronous broker operations. If this parameter is not included in the request, and the broker can only provision an instance of the requested plan asynchronously, the broker should reject the request with a 422 as described below.
      previous_values:
        $ref: '#/definitions/PreviousValues'
    required:
    - service_id
  DeprovisionParameters:
    description: Configuration for deprovisioning a service instance.
    properties:
      service_id:
        type: string
        description: ID of the service from the catalog.
      plan_id:
        type: string
        description: ID of the plan from the catalog.
      accepts_incomplete:
        type: boolean
        description: A value of true indicates that the marketplace and its clients support asynchronous broker operations. If this parameter is not included in the request, and the broker can only provision an instance of the requested plan asynchronously, the broker should reject the request with a 422 as described below.
    required:
    - service_id
    - plan_id
  ProvisionResponse:
    description: A provision request has been received.
    properties:
      dashboard_url:
        type: string
        description: The URL of a web-based management user interface for the service instance; we refer to this as a service dashboard. The URL should contain enough information for the dashboard to identify the resource being accessed.
      operation:
        type: string
        description: For asynchronous responses, service brokers may return an identifier representing the operation. The value of this field should be provided by the platform with requests to the relevant last operation endpoint in a URL encoded query parameter.
  Empty:
    type: string
    description: Empty response should be an empty object.
  PreviousValues:
    description: Information about the instance prior to the update.
    properties:
      plan_id:
        type: string
        description: ID of the plan prior to the update.
      service_id:
        type: string
        description: ID of the service for the instance.
      organization_id:
        type: string
        description: ID of the organization containing the instance.
      space_id:
        type: string
        description: ID of the space containing the instance.
  ServiceParameters:
    description: Configuration options for the service instance.
    properties:
      name:
        type: string
        description: Name of the parameter.
      value:
        type: object
        description: Value of the parameter.
  BindingParameters:
    description: Configuration for creating a service binding.
    properties:
      service_id:
        type: string
        description: The ID of the servicef rom the catalog. Although this is not required, the platform should include them on all requests.
      plan_id:
        type: string
        description: The ID of the plan from the catalog. Although this is not required, the platform should include them on all requests.
      operation:
        type: string
        description: A broker-provided identifier for the operation. When a value for `operation` is included with asynchronous responses for provision service, update service and deprovision service requests, the platform should provide the same value using this query parameter.
  UnbindingParameters:
    description: Configuration for deleting a service binding.
    properties:
      service_id:
        type: string
        description: ID of the service from the catalog.
      plan_id:
        type: string
        description: ID of the plan from the catalog.
    required:
    - service_id
    - plan_id
  BindingCreated:
    description: A binding has been generated successfully.
    properties:
      credentials:
        type: object
        description: A free-form hash of credentials that may be used by applications or users to access the service.
      syslog_drain_url:
        type: string
        description: "A URL to which logs may be streamed. `'requires': [ ' syslog_drain ' ]` must be declared in the catalog endpoint or the platform should consider the response invalid."
      route_service_url:
        type: string
        description: "A URL to which the platform may proxy requests for the address sent with `bind_resource.route` in the request body. `'requires': [ 'route_forwarding' ]` must be declared in the catalog endpoint or the platform should consider the response invalid."
      volume_mounts:
        type: array
        description: "An array of configuration for mounting volumes. `'requires': [ 'volume_mount' ]` must be declared in the catalog endpoint or the platform should consider the response invalid."
        items:
          type: object
  OperationInProgress:
    description: An operation is in progress.
    properties:
      operation:
        type: string
        description: For asynchronous responses, service brokers may return an identifier representing the operation. The value of this field should be provided by the platform with requests to the relevant last operation endpoint in a URL encoded query parameter.
  LastOperationResponse:
    description: Information on the completed last operation.
    properties:
      state:
        type: string
        description: Valid values are `in progress`, `succeeded` and `failed`. While the state is `in progress`, the platform should continue polling. A state of `succeeded` or `failed` should cause the platform to cease polling.
      description:
        type: string
        description: A user-facing message displayed to the platform API client. Can be used to tell the user details about the status of the operation.
    required:
    - state
  Error:
    description: An error has occurred.
    properties:
      error:
        type: string
        description: The name of the error.
      description:
        type: string
        description: The description of the error.