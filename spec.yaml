swagger: '2.0'
info:
  version: '2.11'
  title: Service Broker API
  description: |
    The Service Broker API defines an HTTP interface between the services marketplace of a platform and service brokers.
externalDocs:
  description: |
    Further information on this specification.
  url: 'https://github.com/openservicebrokerapi/servicebroker'
host: 127.0.0.1:8888
basePath: /v2
schemes:
- http
paths:
  /catalog:
    get:
      operationId: catalog
      summary: Fetch the catalog of plans that a service offers.
      description: |
        The first endpoint that a broker must implement is the service catalog.
        The platform marketplace fetches this endpoint from all brokers in order to present an aggregated user-facing catalog.
        Warnings for broker authors:
        * Be cautious removing services and plans from their catalogs, as platform marketplaces may have provisioned service instances of these plans. Consider your deprecation strategy.
        * Do not change the ids of services and plans. This action is likely to be evaluated by a platform marketplace as a removal of one plan and addition of another. See above warning about removal of plans.
        Responses with any undefined status codes should be interpreted as an error.
      headers: '#/definitions/DefaultHeaders'
      produces:
      - application/json
      tags:
      - catalog
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CatalogServices'
  /service_instances/{instance_id}:
    parameters:
    - $ref: '#/parameters/instance_id'
    put:
      operationId: createServiceInstance
      summary: Provisions a service instance.
      description: |
        When the broker receives a provision request from the platform, it should take whatever action is necessary to create a new resource.
        What provisioning represents varies by service and plan, although there are several common use cases.
        For a MySQL service, provisioning could result in an empty dedicated database server running on its own VM or an empty schema on a shared database server.
        For non-data services, provisioning could just mean an account on an multi-tenant SaaS application.
      headers: '#/definitions/DefaultHeaders'
      produces:
      - application/json
      consumes:
      - application/json
      tags:
      - service_instances
      parameters:
      - name: service_id
        in: body
        type: string
        description: The ID of the service (from the catalog). Must be globally unique.
        required: true
      - name: plan_id
        in: body
        type: string
        description: The ID of the plan (from the catalog) for which the service instance has been requested. Must be unique to a service.
        required: true
      - name: parameters
        in: body
        $ref: '#/definitions/ServiceParameters'
      - name: accepts_incomplete
        type: boolean
        description: A value of true indicates that the marketplace and its clients support asynchronous broker operations. If this parameter is not included in the request, and the broker can only provision an instance of the requested plan asynchronously, the broker should reject the request with a 422 as described below.
      - name: organization_guid
        in: body
        type: string
        description: The platform GUID for the organization under which the service is to be provisioned. Although most brokers will not use this field, it may be helpful for executing operations on a user's behalf.
        required: true
      - name: space_guid
        in: body
        type: string
        description: The identifier for the project space within the platform organization. Although most brokers will not use this field, it may be helpful for executing operations on a user's behalf.
        required: true
      responses:
        '200':
          description: May be returned if the service instance already exists and the requested parameters are identical to the existing service instance. The expected response body is below.
          schema:
            $ref: '#/definitions/ProvisionResponse'
        '201':
          description: Service instance has been provisioned. The expected response body is below.
          schema:
            $ref: '#/definitions/ProvisionResponse'
        '202':
          description: Service instance provisioning is in progress. This triggers the platform marketplace to poll the relevant last operation endpoint for operation status.
          schema:
            $ref: '#/definitions/ProvisionResponse'
        '409':
          description: Should be returned if a service instance with the same id already exists but with different attributes.
          schema:
            $ref: '#/definitions/Empty'
        '422':
          description: Should be returned if the broker only supports asynchronous provisioning for the requested plan and the request did not include `?accepts_incomplete=true`.
          schema:
            $ref: '#/definitions/Error'
    patch:
      operationId: updateServiceInstance
      summary: Updating a Service Instance
      description: |
        By implementing this endpoint, service broker authors can enable users to modify two attributes of an existing service instance: the service plan and parameters.
        By changing the service plan, users can upgrade or downgrade their service instance to other plans.
        By modifying properties, users can change configuration options that are specific to a service or plan.
        To enable support for the update of the plan, a broker should declare support per service by including `plan_updateable: true` in its catalog endpoint.
        Not all permutations of plan changes are expected to be supported. For example, a service may support upgrading from plan "shared small" to "shared large" but not to plan "dedicated".
        It is up to the broker to validate whether a particular permutation of plan change is supported. If a particular plan change is not supported, the broker should return a meaningful error message in response.
      headers: '#/definitions/DefaultHeaders'
      consumes:
      - application/json
      produces:
      - application/json
      tags:
      - service_instances
      parameters:
      - name: service_id
        in: body
        type: string
        description: The ID of the service (from the catalog). Must be globally unique.
        required: true
      - name: plan_id
        in: body
        type: string
        description: The ID of the plan (from the catalog) for which the service instance has been requested. Must be unique to a service.
      - name: parameters
        in: body
        $ref: '#/definitions/ServiceParameters'
      - name: accepts_incomplete
        in: body
        type: boolean
        description: A value of true indicates that the marketplace and its clients support asynchronous broker operations. If this parameter is not included in the request, and the broker can only provision an instance of the requested plan asynchronously, the broker should reject the request with a 422 as described below.
      - name: previous_values
        in: body
        $ref: '#/definitions/PreviousValues'
      responses:
        '200':
          description: The requests changes have been applied.
          schema:
            $ref: '#/definitions/Empty'
        '202':
          description: Service instance update is in progress. This triggers the platform marketplace to poll the relevant last operation endpoint for operation status.
          schema:
            $ref: '#/definitions/LastOperation'
        '422':
          description: May be returned if the requested change is not supported or if the request cannot currently be fulfilled due to the state of the instance (e.g. instance utilization is over the quota of the requested plan). Broker should include a user-facing message in the body. Additionally, a 422 can also be returned if the broker only supports asynchronous update for the requested plan and the request did not include `?accepts_incomplete=true`.
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: deprovisionServiceInstance
      summary: Deprovisions a service instance.
      description: Delete a service instance and associated resources.
      headers: '#/definitions/DefaultHeaders'
      produces:
      - application/json
      tags:
      - service_instances
      parameters:
      - name: service_id
        in: body
        type: string
        required: true
        description: ID of the service from the catalog.
      - name: plan_id
        in: body
        type: string
        required: true
        description: ID of the plan from the catalog.
      - name: accepts_incomplete
        in: body
        type: boolean
        description: A value of true indicates that the marketplace and its clients support asynchronous broker operations. If this parameter is not included in the request, and the broker can only provision an instance of the requested plan asynchronously, the broker should reject the request with a 422 as described below.
      responses:
        '200':
          description: Service instance was deleted.
          schema:
            $ref: '#/definitions/Empty'
        '202':
          description: Service instance deletion is in progress. This triggers the marketplace to poll the relevant last operation endpoint for operation status.
          schema:
            $ref: '#/definitions/LastOperation'
        '410':
          description: Should be returned if the service instance does not exist.
          schema:
            $ref: '#/definitions/Empty'
        '422':
          description: Should be returned if the broker only supports asynchronous deprovisioning for the requested plan and the request did not include `?accepts_incomplete=true`.
          schema:
            $ref: '#/definitions/Error'
  /service_instances/{instance_id}/service_bindings/{binding_id}:
    parameters:
    - $ref: '#/parameters/instance_id'
    - $ref: '#/parameters/binding_id'
    put:
      operationId: serviceBind
      x-version: '2.6'
      summary: Binds to a service
      description: 'When the broker receives a bind request from the Cloud Controller, it should return information which helps an application to utilize the provisioned resource. This information is generically referred to as credentials. Applications should be issued unique credentials whenever possible, so one application access can be revoked without affecting other bound applications. For more information on credentials, [see Binding Credentials](https://docs.cloudfoundry.org/services/binding-credentials.html).'
      produces:
      - application/json
      consumes:
      - application/json
      tags:
      - service_instances
      parameters:
      - name: service_id
        in: body
        type: string
        required: true
        description: ID of the service from the catalog.
      - name: plan_id
        in: body
        type: string
        required: true
        description: ID of the plan from the catalog.
      - name: app_guid
        in: body
        type: string
        description: Deprecated in favour of `bind_resource.app_guid`. GUID of an application associated with the binding to be created.
      - name: bind_resource
        in: body
        schema:
          $ref: '#/definitions/Binding'
      responses:
        '200':
          description: 'May be returned if the binding already exists and the requested parameters are identical to the existing binding.'
          schema:
            $ref: '#/definitions/BindingResponse'
        '201':
          description: Binding has been created.
          schema:
            $ref: '#/definitions/BindingResponse'
        '409':
          description: 'Should be returned if the requested binding already exists. The expected response body is {}, though the description field can be used to return a user-facing error message, as described in Broker Errors.'
          schema:
            $ref: '#/definitions/Empty'
    delete:
      operationId: serviceUnbind
      summary: Unbinds a service
      description: 'When a broker receives an unbind request from Cloud Controller, it should delete any resources it created in bind. Usually this means that an application immediately cannot access the resource.'
      produces:
      - application/json
      tags:
      - service_instances
      parameters:
      - name: UnbindParameters
        in: body
        required: true
        schema:
          $ref: '#/definitions/UnbindParameters'
      responses:
        '200':
          description: Binding was deleted. The expected response body is {}.
          schema:
            $ref: '#/definitions/Empty'
        '410':
          description: 'Should be returned if the binding does not exist. The expected response body is {}.'
          schema:
            $ref: '#/definitions/Empty'
parameters:
  instance_id:
    name: instance_id
    in: path
    description: The `instance_id` of a service instance is provided by the platform. This ID will be used for future requests (bind and deprovision), so the broker must use it to correlate the resource it creates.
    type: string
    required: true
  last_operation:
    name: last_operation
    in: path
    description: The ID of a previous operation.
    required: true
    type: string
  binding_id:
    name: binding_id
    in: path
    description: The binding_id of a service binding is provided by the platform. This ID will be used for future unbind requests, so the broker must use it to correlate the resource it creates.
    type: string
    required: true
definitions:
  DefaultHeaders:
    X-Broker-API-Version:
      description: 2.11
      type: string
  CatalogServices:
    description: Array of service objects.
    properties:
      services:
        type: array
        items:
          $ref: '#/definitions/Services'
  Services:
    description: Schema of a service object.
    properties:
      id:
        type: string
        description: An identifier used to correlate this service in future requests to the broker. This must be globally unique within a platform marketplace. Using a GUID is recommended.
        required: true
      name:
        type: string
        description: A CLI-friendly name of the service. All lowercase, no spaces. This must be globally unique within a platform marketplace.
        required: true
      description:
        type: string
        description: A short description of the service.
        required: true
      bindable:
        type: boolean
        description: Specifies whether instances of the service can be bound to applications. This specifies the default for all plans of this service. Plans can override this field.
        required: true
      tags:
        type: array
        description: Tags provide a flexible mechanism to expose a classification, attribute, or base technology of a service, enabling equivalent services to be swapped out without changes to dependent logic in applications, buildpacks, or other services. E.g. mysql, relational, redis, key-value, caching, messaging, amqp.
        items:
          type: string
      metadata:
        type: object
        description: An opaque object of metadata for a service offering. Controller treats this as a blob. Note that there are (conventions)[https://docs.cloudfoundry.org/services/catalog-metadata.html] in existing brokers and controllers for fields that aid in the display of catalog data.
      dashboard_client:
        $ref: '#/definitions/DashboardClient'
      plan_updateable:
        type: boolean
        description: Whether the service supports upgrade/downgrade for some plans. Please note that the misspelling of the attribute plan_updatable to plan_updateable was done by mistake. We have opted to keep that misspelling instead of fixing it and thus breaking backward compatibility.
      plans:
        type: array
        description: A list of plans for this service.
        items:
          $ref: '#/definitions/Plan'
      dashboard_client:
        $ref: '#/definitions/Dashboard_client'
  DashboardClient:
    description: Contains the data necessary to activate the [Dashboard SSO feature](https://docs.cloudfoundry.org/services/dashboard-sso.html) for this service.
    properties:
      id:
        type: string
        description: The id of the Oauth client that the dashboard will use.
      secret:
        type: string
        description: A secret for the dashboard client
      redirect_uri:
        type: string
        description: A URI for the service dashboard. Validated by the OAuth token server when the dashboard requests a token.
  Plan:
    description: A plan offered by a service.
    properties:
      id:
        type: string
        description: An identifier used to correlate this plan in future requests to the broker. This must be globally unique within a platform marketplace. Using a GUID is recommended.
        required: true
      name:
        type: string
        description: The CLI-friendly name of the plan. Must be unique within the service. All lowercase, no spaces.
        required: true
      description:
        type: string
        description: A short description of the plan.
        required: true
      metadata:
        type: object
        description: An opaque object of metadata for a service offering. Controller treats this as a blob. Note that there are (conventions)[https://docs.cloudfoundry.org/services/catalog-metadata.html] in existing brokers and controllers for fields that aid in the display of catalog data.
      free:
        type: boolean
        description: When false, instances of this plan have a cost. The default is true.
      bindable:
        type: boolean
        description: Specifies whether instances of the service plan can be bound to applications. This field is optional. If specified, this takes precedence over the bindable attribute of the service. If not specified, the default is derived from the service.
  ProvisionResponse:
    description: A provision request has been received.
    properties:
      dashboard_url:
        type: string
        description: The URL of a web-based management user interface for the service instance; we refer to this as a service dashboard. The URL should contain enough information for the dashboard to identify the resource being accessed.
      operation:
        type: string
        description: For asynchronous responses, service brokers may return an identifier representing the operation. The value of this field should be provided by the broker client with requests to the relevant last operation endpoint in a URL encoded query parameter.
  Empty:
    type: string
    description: Empty response should be an empty object (`{}`).
  PreviousValues:
    description: Information about the instance prior to the update.
    properties:
      plan_id:
        type: string
        description: ID of the plan prior to the update.
      service_id:
        type: string
        description: ID of the service for the instance.
      organization_id:
        type: string
        description: ID of the organization containing the instance.
      space_id:
        type: string
        description: ID of the space containing the instance.
  ServiceParameters:
    description: Configuration options for the service instance. Controller treats this as a blob. Note that there are (conventions)[https://docs.cloudfoundry.org/services/catalog-metadata.html] in existing brokers and controllers for fields that aid in the display of catalog data.
    properties:
      name:
        type: string
        description: Name of the parameter.
      value:
        type: object
        description: Value of the parameter.
  PreviousValues:
    description: Information about the instance prior to the update.
    properties:
      service_id:
        type: string
        description: ID of the service for the instance.
      plan_id:
        type: string
        description: ID of the plan prior to the update.
      organization_id:
        type: string
        description: ID of the organization specified for the instance.
      space_id:
        type: string
        description: ID of the space specified for the instance.
  LastOperation:
    description: An operation is in progress.
    properties:
      operation:
        type: string
        description: For asynchronous responses, service brokers may return an identifier representing the operation. The value of this field should be provided by the broker client with requests to the relevant last operation endpoint in a URL encoded query parameter.
  Binding:
    description: A JSON object that contains data for platform resources associated with the binding to be created.
    properties:
      app_guid:
        type: string
        description: GUID of the application that you want to bind your service to. Will be included when users bind applications to service instances.
      route:
        type: string
        desceiption: A URI providing access to the service.
  BindingResponse:
    description: Success binding response.
    properties:
      credentials:
        type: object
        description: A free-form hash of credentials that the bound application can use to access the service. For more information, [see Binding Credentials](https://docs.cloudfoundry.org/services/binding-credentials.html).
      syslog_drain_url:
        type: string
        description: A URL to which Cloud Foundry should drain logs for the bound application. requires syslog_drain must be declared in the catalog endpoint or Cloud Foundry will consider the response invalid. For details, [see Application Log Streaming](https://docs.cloudfoundry.org/services/app-log-streaming.html).
  Metadata:
    description: metadata related to the service
    properties:
      displayName:
        type: string
        description: displayName of the service.
      listing:
        $ref: '#/definitions/Listing'
      provider:
        $ref: '#/definitions/Provider'
  Listing:
    description: Listing.
    properties:
      blurb:
        type: string
        description: blurb
      imageUrl:
        type: string
        description: image URL.
      longDescription:
        type: string
        description: Long Description
  Provider:
    description: Provider
    properties:
      name:
        type: string
        description: Provider Name
  Error:
    description: An error has occurred.
    properties:
      error:
        type: string
        description: The name of the error.
      description:
        type: string
        description: The description of the error.
  UnbindParameters:
    description: Parameters needed to unbind a service instance
    properties:
      service_id:
        type: string
        description: ID of the service from the catalog. While not strictly necessary, some brokers might make use of this ID.
      plan_id:
        type: string
        description: ID of the plan from the catalog. While not strictly necessary, some brokers might make use of this ID.